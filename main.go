package main

import (
	"context"
	"errors"
	"fmt"
	"github.com/gin-gonic/gin"
	"github.com/junmocsq/yizhen/controller/v1"
	"github.com/junmocsq/yizhen/route"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	_ "github.com/junmocsq/yizhen/docs" // docs is generated by Swag CLI, you have to import it.
)

// @title gua
// @version 1.0
// @description yizhen

// @contact.name junmo
// @contact.url http://www.github.com/junmocsq
// @contact.email junmocsq@163.com

// @license.name MIT
// @license.url https://github.com/junmocsq/gua/blob/master/LICENSE

// @host localhost:8080
// @BasePath /
func main() {
	router := gin.Default()
	// go get -u github.com/swaggo/swag/cmd/swag
	// 一旦设置了参数NAME_OF_ENV_VARIABLE，则swagger请求返回404
	// swag init 生成swagger json
	// http://localhost:8080/swagger/index.html
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	router.Static("/assets", "./assets")

	router.GET("/local/file", func(c *gin.Context) {
		c.File("main.go")
	})

	router.GET("/long_async", func(c *gin.Context) {
		// create copy to be used inside the goroutine
		cCp := c.Copy()
		go func() {
			// simulate a long task with time.Sleep(). 5 seconds
			time.Sleep(5 * time.Second)

			// note that you are using the copied context "cCp", IMPORTANT
			log.Println("Done! in path " + cCp.Request.URL.Path)
		}()
	})

	router.GET("/long_sync", func(c *gin.Context) {
		// simulate a long task with time.Sleep(). 5 seconds
		time.Sleep(5 * time.Second)

		// since we are NOT using a goroutine, we do not have to copy the context
		log.Println("Done! in path " + c.Request.URL.Path)
	})

	route.V1User(router)
	// @Router /post/{ids}/accounts/{account_id} [post]
	router.POST("/post", func(c *gin.Context) {
		ids := c.QueryMap("ids")
		names := c.PostFormMap("names")
		fmt.Printf("ids: %v; names: %v", ids, names)
	})

	srv := &http.Server{
		Addr:           ":8080",
		Handler:        router,
		ReadTimeout:    60 * time.Second,
		WriteTimeout:   60 * time.Second,
		IdleTimeout:    65 * time.Second,
		MaxHeaderBytes: 1 << 20,
	}

	go func() {
		if err := srv.ListenAndServe(); err != nil && errors.Is(err, http.ErrServerClosed) {
			log.Printf("listen:%s\n", err)
		}
	}()

	quit := make(chan os.Signal)
	// kill (no param) default send syscall.SIGTERM
	// kill -2 is syscall.SIGINT CTRL+C
	// kill -9 is syscall.SIGKILL but can't be catch, so don't need add it
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM, syscall.SIGSTOP)
	<-quit
	log.Println("Shutting down server...")

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	if err := srv.Shutdown(ctx); err != nil {
		log.Fatal("Server forced to shutdown:", err)
	}
	log.Println("Server exiting")
}

func vision1(engine *gin.Engine) {
	vision := engine.Group("/v1")
	tieba := vision.Group("/tieba")
	{
		tieba.GET("/tiebaById", v1.NewTB().TiebaById)
		tieba.GET("/tiebaByName", v1.NewTB().TiebaByName)
		tieba.GET("/tiebaList", v1.NewTB().TiebaList)
	}
}
